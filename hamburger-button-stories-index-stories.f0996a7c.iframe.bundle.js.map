{"version":3,"file":"hamburger-button-stories-index-stories.f0996a7c.iframe.bundle.js","mappings":";;AAmCA;;;;;AAaA;;AAEA;;;;;AAaA;;;AAeA;AACA;;;;AAMA;;;;;;;AAQA;AACA;;;;;;AAQA;;;;;;;;;;AAWA;AACA;;;;;;AAQA;;;;;;;AAUA","sources":["webpack://@mrcgrtz/elements/./src/hamburger-button/index.tsx"],"sourcesContent":["/**\n * Hamburger Button Component\n * @author Marc Görtz <https://marcgoertz.de/>\n */\n\nimport React, {\n  memo,\n  StrictMode,\n  useCallback,\n  useState,\n  type ComponentType,\n  type FC,\n} from 'react';\nimport {css, styled} from 'styled-components';\n\ntype Position = {\n  blockStart?: string;\n  blockEnd?: string;\n  inlineStart?: string;\n  inlineEnd?: string;\n};\n\ntype LinesProperties = {\n  $isX: boolean;\n};\n\ntype Properties = {\n  readonly label?: string;\n  readonly labelActive?: string;\n  readonly id?: string;\n  readonly position: Position;\n};\n\nconst Input = styled.input<{$position: Position}>`\n  position: absolute;\n  inset: ${(p) =>\n    [\n      p.$position.blockStart ?? 'auto',\n      p.$position.inlineEnd ?? 'auto',\n      p.$position.blockEnd ?? 'auto',\n      p.$position.inlineStart ?? 'auto',\n    ].join(' ')};\n  inline-size: 1px;\n  block-size: 1px;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n`;\n\nconst Hamburger = styled.label<{$position: Position}>`\n  position: absolute;\n  inset: ${(p) =>\n    [\n      p.$position.blockStart ?? 'auto',\n      p.$position.inlineEnd ?? 'auto',\n      p.$position.blockEnd ?? 'auto',\n      p.$position.inlineStart ?? 'auto',\n    ].join(' ')};\n  z-index: 1;\n  inline-size: 2em;\n  block-size: 1.5em;\n  cursor: pointer;\n`;\n\nconst LinesCommon = `\n  display: block;\n  position: absolute;\n  border-radius: 4px;\n  inline-size: 100%;\n  block-size: 4px;\n  background-color: currentColor;\n  transition-property: transform;\n  transition-duration: 0.2s;\n  transition-timing-function: ease;\n`;\n\nconst Lines = styled.span<LinesProperties>`\n  inset-block-start: 50%;\n  margin-block-start: -2px;\n  ${LinesCommon}\n  ${(p) =>\n    p.$isX\n      ? css`\n          transform: rotate(225deg);\n          transition-delay: 0.12s;\n          transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n        `\n      : css`\n          transition-duration: 0.2s;\n          transition-timing-function: ease;\n        `}\n\n  &::before {\n    content: '';\n    ${LinesCommon}\n    ${(p) =>\n      p.$isX\n        ? css`\n            inset-block-start: 0;\n            opacity: 0;\n            transition:\n              inset-block-start 0.1s ease-out,\n              opacity 0.1s 0.12s ease-out;\n          `\n        : css`\n            inset-block-start: -10px;\n            transition:\n              inset-block-start 0.1s 0.25s ease-in,\n              opacity 0.1s ease-in;\n          `}\n  }\n\n  &::after {\n    content: '';\n    ${LinesCommon}\n    ${(p) =>\n      p.$isX\n        ? css`\n            inset-block-end: 0;\n            transform: rotate(-90deg);\n            transition:\n              inset-block-end 0.1s ease-out,\n              transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);\n          `\n        : css`\n            inset-block-end: -10px;\n            transition:\n              inset-block-end 0.1s 0.25s ease-in,\n              transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);\n          `}\n  }\n` as ComponentType<LinesProperties>;\n\nconst HamburgerButton: FC<Properties> = ({\n  label = 'Menü anzeigen',\n  labelActive = 'Menü ausblenden',\n  id = 'toggle',\n  position,\n}) => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = useCallback(() => {\n    setChecked((previous) => !previous);\n  }, []);\n\n  return (\n    <StrictMode>\n      <Input\n        type=\"checkbox\"\n        id={id}\n        $position={position}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <Hamburger\n        htmlFor={id}\n        aria-label={checked ? labelActive : label}\n        $position={position}\n      >\n        <Lines $isX={checked} />\n      </Hamburger>\n    </StrictMode>\n  );\n};\n\nexport default memo(HamburgerButton);\n"],"names":[],"sourceRoot":""}