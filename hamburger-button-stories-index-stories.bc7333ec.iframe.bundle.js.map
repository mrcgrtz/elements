{"version":3,"file":"hamburger-button-stories-index-stories.bc7333ec.iframe.bundle.js","mappings":";;AA6BA;;;;;AAaA;;AAEA;;;;;AAaA;;;AAeA;AACA;;;;AAcA;AACA;;;;;AAeA;AACA;;AAcA","sources":["webpack://@mrcgrtz/elements/./src/hamburger-button/index.tsx"],"sourcesContent":["/**\n * Hamburger Button Component\n * @author Marc Görtz <https://marcgoertz.de/>\n */\n\nimport React, {StrictMode, useState} from 'react';\nimport type {ComponentType} from 'react';\nimport {styled} from 'styled-components';\n\ntype Position = {\n  blockStart?: string;\n  blockEnd?: string;\n  inlineStart?: string;\n  inlineEnd?: string;\n};\n\ntype LinesProps = {\n  $isX: boolean;\n};\n\ntype Props = {\n  readonly label?: string;\n  readonly labelActive?: string;\n  readonly id?: string;\n  readonly position: Position;\n};\n\nconst Input = styled.input<{$position: Position}>`\n  position: absolute;\n  inset: ${(p) =>\n    [\n      p.$position.blockStart ?? 'auto',\n      p.$position.inlineEnd ?? 'auto',\n      p.$position.blockEnd ?? 'auto',\n      p.$position.inlineStart ?? 'auto',\n    ].join(' ')};\n  inline-size: 1px;\n  block-size: 1px;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n`;\n\nconst Hamburger = styled.label<{$position: Position}>`\n  position: absolute;\n  inset: ${(p) =>\n    [\n      p.$position.blockStart ?? 'auto',\n      p.$position.inlineEnd ?? 'auto',\n      p.$position.blockEnd ?? 'auto',\n      p.$position.inlineStart ?? 'auto',\n    ].join(' ')};\n  z-index: 1;\n  inline-size: 2em;\n  block-size: 1.5em;\n  cursor: pointer;\n`;\n\nconst LinesCommon = `\n  display: block;\n  position: absolute;\n  border-radius: 4px;\n  inline-size: 100%;\n  block-size: 4px;\n  background-color: currentColor;\n  transition-property: transform;\n  transition-duration: 0.2s;\n  transition-timing-function: ease;\n`;\n\nconst Lines = styled.span<LinesProps>`\n  inset-block-start: 50%;\n  margin-block-start: -2px;\n  ${LinesCommon}\n  ${(p) =>\n    p.$isX\n      ? `\n    transform: rotate(225deg);\n    transition-delay: 0.12s;\n    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  `\n      : `\n    transition-duration: 0.2s;\n    transition-timing-function: ease;\n  `}\n\n  &::before {\n    content: '';\n    ${LinesCommon}\n    ${(p) =>\n      p.$isX\n        ? `\n      inset-block-start: 0;\n      opacity: 0;\n      transition: inset-block-start 0.1s ease-out, opacity 0.1s 0.12s ease-out;\n    `\n        : `\n      inset-block-start: -10px;\n      transition: inset-block-start 0.1s 0.25s ease-in, opacity 0.1s ease-in;\n    `}\n  }\n\n  &::after {\n    content: '';\n    ${LinesCommon}\n    ${(p) =>\n      p.$isX\n        ? `\n      inset-block-end: 0;\n      transform: rotate(-90deg);\n      transition: inset-block-end 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);\n    `\n        : `\n      inset-block-end: -10px;\n      transition: inset-block-end 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);\n    `}\n  }\n` as ComponentType<LinesProps>;\n\nconst HamburgerButton = ({\n  label,\n  labelActive,\n  id,\n  position,\n}: Props): JSX.Element => {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <StrictMode>\n      <Input\n        type=\"checkbox\"\n        id={id}\n        $position={position}\n        checked={checked}\n        onChange={(): void => {\n          setChecked(!checked);\n        }}\n      />\n      <Hamburger\n        htmlFor={id}\n        aria-label={checked ? labelActive : label}\n        $position={position}\n      >\n        <Lines $isX={checked} />\n      </Hamburger>\n    </StrictMode>\n  );\n};\n\nHamburgerButton.defaultProps = {\n  label: 'Menü anzeigen',\n  labelActive: 'Menü ausblenden',\n  id: 'toggle',\n};\n\nexport default HamburgerButton;\n"],"names":[],"sourceRoot":""}